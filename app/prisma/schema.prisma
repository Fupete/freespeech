generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @unique @default(cuid())
  identifier_token String        @unique
  email            String        @unique
  name             String?
  image            String?
  hashed_password  String?
  theme            String?
  organizationId   String?
  organization     Organization? @relation(fields: [organizationId], references: [id])
  access_tokens    AccessToken[]
  s3_resources     S3Resource[]
  projects         Project[]
  tiles            Tile[]
  tile_pages       TilePage[]

  @@map("user")
}

model Organization {
  id    String @id @unique @default(cuid())
  name  String
  Users User[]

  @@map("organization")
}

model AccessToken {
  id           String @id @unique @default(cuid())
  access_token String @unique @default(uuid())
  userId       String
  user         User   @relation(fields: [userId], references: [id])
}

model Tile {
  id                 String    @id @unique @default(cuid())
  tile_index         Int
  tap_count          Int       @default(0)
  link_id            String?
  display_text       String?
  speak_text         String?
  image              String?
  navigation_page_id Int?
  modifier           String?
  background_color   String?
  border_color       String?
  text_color         String?
  is_silent          Boolean   @default(false)
  is_invisible       Boolean   @default(false)
  is_accented        Boolean   @default(false)
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  tilePageId         Int?
  userId             String
  conjugations       String[]  @default([])
  parent_page        TilePage? @relation(fields: [tilePageId], references: [id])
  author             User      @relation(fields: [userId], references: [id])

  @@map("tile")
}

model TilePage {
  id         Int      @id @unique @default(autoincrement())
  name       String
  user_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  projectId  String?
  Project    Project? @relation(fields: [projectId], references: [id])
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tiles      Tile[]

  @@index([user_id])
  @@map("tile_page")
}

model Project {
  id          String     @id @unique @default(cuid())
  name        String
  description String?
  image       String?
  columns     Int        @default(8)
  index       Int
  public      Boolean    @default(false)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  userId      String
  author      User       @relation(fields: [userId], references: [id])
  pages       TilePage[]

  @@map("project")
}

model S3Resource {
  id         Int      @id @unique @default(autoincrement())
  url        String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     String
  author     User     @relation(fields: [userId], references: [id])
}
